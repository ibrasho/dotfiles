[core]
	editor = vim
	abbrev = 12
	attributesfile = ~/.gitattributes
	excludesfile = ~/.gitignore
	autocrlf = input
	mergeoptions = --no-edit
	ignorecase = false

# A good list of alises http://haacked.com/archive/2014/07/28/github-flow-aliases/
[alias]
	# Staging
	a = add
	aa = add --all

	# Branch
	br = branch
	branch-name = rev-parse --abbrev-ref HEAD
	branch-diff = diff main...HEAD
	branch-files = "!git diff main...HEAD --name-status | sed '/^D/d ; s/^.\\s\\+//'"

	# Commit
	c = commit
	ca = commit -a
	ci = commit
	cal = !git add -A && git commit               # Commit all changes
	cam = commit -am
	cne = commit --no-edit
	amend = commit --amend --no-edit
	amend-all = !git add --all && git commit --amend --reuse-message=HEAD

	unstage = reset
	uncommit = reset --soft HEAD^
	staged = diff --cached

	# Clone
	cl = clone
	sclone = clone --depth=1

	# Checkout
	co = checkout
	cb = checkout -b

	# Cherry-pick
	cp = cherry-pick

	# Diff
	d = diff --color-words
	dc = diff --cached
	df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# Merge
	m = merge

	# Pull
	pl = pull
	plom = pull origin main
	plum = pull upstream main
	preb = !git fetch upstream && git rebase upstream/main

	# Push
	p = push
        pf = push --force-with-lease
	pom = push origin main
	poh = push origin head

	# Stash
	st = stash
	stp = stash pop

	spsp = !git stash && git pull && git stash pop

	# Status/Logging
	s = status
	ss = status -sb
	hist = log --graph --pretty=custom           # Show custom graph
	l = log --pretty=custom                      # Show custom log
	ll = log --stat --abbrev-commit
	lc = shortlog --summary --numbered           # List contributors

	# Reset
	unstage = reset HEAD --                      # Mixed reset (affects HEAD and Index)
	undo = reset --soft HEAD~1                   # Undo last commit (affects HEAD only)
	reset = reset --hard HEAD~1                  # Remove last commit (from HEAD, Index and Working Dir)

	# Remote
	r = remote -v

	# Submodules
	subpl = submodule update --init --recursive

	# codereview
	change = codereview change
	gofmt = codereview gofmt
	mail = codereview mail
	pending = codereview pending
	submit = codereview submit
	sync = codereview sync

	# Misc
	publish = "!git push --set-upstream origin $(git branch-name)"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	# Find commits by source code

	cc = "!f() { \
		git log --pretty=custom --decorate --date=short -S\"$1\"; \
	}; f"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	# Credit an author on the latest commit

	credit = "!f() { \
		if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
			git commit --amend --author \"$1 <$2>\" -C HEAD; \
		fi \
	}; f"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	# List remote branches

	lrb = "!f() { \
		remote="${1:-origin}"; \
		git ls-remote --heads "$remote"; \
	}; f"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	# Remove the tag with the specified tag name if
	# exists and tag the latest commit with that name

	retag = "!f() { \
		git tag -d "$1" &> /dev/null; \
		git tag $1; \
	}; f"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# So much color
[color]
	ui = always

[color "branch"]
	current = green bold
	local = green
	remote = yellow

[color "diff"]
	frag = magenta
	meta = yellow
	new = green
	old = red

[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"

[color "status"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22

# Git mergetool
[merge]
	tool = opendiff

[pager]
	# Insanely beautiful diffs ==> npm install -g diff-so-fancy
	diff = diff-so-fancy | less --tabs=4 -RFX
	show = diff-so-fancy | less --tabs=4 -RFX

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[pretty]
	custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
	#                     │        │            │            │             └─ author name
	#                     │        │            │            └─ message
	#                     │        │            └─ date (relative)
	#                     │        └─ decorations (branch, heads or tags)
	#                     └─ hash (abbreviated)

[help]
	# Correct typos
	autocorrect = 1

[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

# Push easily http://stackoverflow.com/a/23918418/89484
[push]
	# Make `git push` automatically push relevant
	# annotated tags when pushing branches out
	followTags = true
	default = current

# Use separate file for username / github token / etc
[include]
	path = ~/.gitconfig.local

[fetch]
	prune = true

[gpg]
	program = /usr/local/bin/gpg

[tag]
	# forceSignAnnotated = true

[pull]
	rebase = true

[commit]
	# gpgsign = true

[diff]
	noprefix = true

[init]
	defaultBranch = main
